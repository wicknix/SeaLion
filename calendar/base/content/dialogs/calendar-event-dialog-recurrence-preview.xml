<?xml version="1.0"?>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="recurrence-preview" extends="xul:box">
    <resources>
      <stylesheet src="chrome://calendar/content/widgets/calendar-widget-bindings.css"/>
    </resources>
    <content>
      <xul:box flex="1" style="overflow: hidden;">
        <xul:grid flex="1" anonid="mainbox">
          <xul:columns>
            <xul:column anonid="column"/>
            <xul:column flex="1"/>
          </xul:columns>
          <xul:rows>
            <xul:row anonid="row">
              <xul:minimonth anonid="minimonth" readonly="true"/>
              <xul:minimonth anonid="minimonth" readonly="true"/>
              <xul:minimonth anonid="minimonth" readonly="true"/>
              <xul:spacer/>
            </xul:row>
          </xul:rows>
        </xul:grid>
      </xul:box>
    </content>

    <implementation>
      <field name="mRecurrenceInfo">null</field>
      <field name="mResizeHandler">null</field>
      <field name="mDateTime">null</field>

      <constructor><![CDATA[
        this.mResizeHandler = this.onResize.bind(this);
        window.addEventListener("resize", this.mResizeHandler, true);
      ]]></constructor>

      <destructor><![CDATA[
        window.removeEventListener("resize", this.mResizeHandler, true);
      ]]></destructor>

      <property name="dateTime">
        <setter><![CDATA[
            this.mDateTime = val.clone();
            return this.mDateTime;
        ]]></setter>
        <getter><![CDATA[
            if (this.mDateTime == null) {
                this.mDateTime = now();
            }
            return this.mDateTime;
        ]]></getter>
      </property>
      <method name="onResize">
        <body><![CDATA[
          let minimonth =
              document.getAnonymousElementByAttribute(
                  this, "anonid", "minimonth");

          let row =
              document.getAnonymousElementByAttribute(
                  this, "anonid", "row");
          let rows = row.parentNode;

          let contentWidth = minimonth.boxObject.width;
          let containerWidth =
              document.getAnonymousNodes(this)[0]
                  .boxObject.width;

          // Now find out how much elements can be displayed.
          // this is a simple division which always yields a positive integer value.
          let numHorizontal =
              (containerWidth -
                  (containerWidth % contentWidth)) /
                      contentWidth;

          let contentHeight = minimonth.boxObject.height;
          let containerHeight =
              document.getAnonymousNodes(this)[0]
                  .boxObject.height;

          // Now find out how much elements can be displayed.
          // this is a simple division which always yields a positive integer value.
          let numVertical =
              (containerHeight -
                  (containerHeight % contentHeight)) /
                      contentHeight;
          numVertical = Math.max(1, numVertical);

          // Count the number of existing rows
          let numRows = 0;
          let rowIterator = row;
          while (rowIterator) {
              numRows++;
              rowIterator = rowIterator.nextSibling;
          }

          // Adjust rows
          while (numRows < numVertical) {
              let newNode = row.cloneNode(true);
              rows.appendChild(newNode);
              numRows++;
          }
          while (numRows > numVertical) {
              rows.firstChild.remove();
              numRows--;
          }

          // Adjust columns in the grid
          let column =
              document.getAnonymousElementByAttribute(
                  this, "anonid", "column");
          let columns = column.parentNode;
          while ((columns.childNodes.length - 1) < numHorizontal) {
              let newColumn = column.cloneNode(false);
              columns.insertBefore(newColumn, column.nextSibling);
          }
          while ((columns.childNodes.length - 1) > numHorizontal) {
              columns.firstChild.remove();
          }

          // Walk all rows and adjust column elements
          row = document.getAnonymousElementByAttribute(
                   this, "anonid", "row");
          while (row) {
              let firstChild = row.firstChild;
              while ((row.childNodes.length - 1) < numHorizontal) {
                  let newNode = firstChild.cloneNode(true);
                  firstChild.parentNode.insertBefore(newNode, firstChild);
              }
              while ((row.childNodes.length - 1) > numHorizontal) {
                  row.firstChild.remove();
              }
              row = row.nextSibling;
          }

          this.updateContent();
          this.updatePreview(this.mRecurrenceInfo);
        ]]></body>
      </method>

      <method name="updateContent">
        <body><![CDATA[
          let date = cal.dateTimeToJsDate(this.dateTime);
          let row = document.getAnonymousElementByAttribute(
                        this, "anonid", "row");
          while (row) {
              let numChilds = row.childNodes.length - 1;
              for (let i = 0; i < numChilds; i++) {
                  let minimonth = row.childNodes[i];
                  minimonth.showMonth(date);
                  date.setMonth(date.getMonth() + 1);
              }
              row = row.nextSibling;
          }
        ]]></body>
      </method>

      <method name="updatePreview">
        <parameter name="aRecurrenceInfo"/>
        <body><![CDATA[
          this.mRecurrenceInfo = aRecurrenceInfo;
          let start = this.dateTime.clone();
          start.day = 1;
          start.hour = 0;
          start.minute = 0;
          start.second = 0;
          let end = start.clone();
          end.month++;

          // the 'minimonth' controls are arranged in a
          // grid, sorted by rows first -> iterate the rows that may exist.
          let row = document.getAnonymousElementByAttribute(this, "anonid", "row");
          while (row) {
              // now iterater all the child nodes of this row
              // in order to visit each minimonth in turn.
              let numChilds = row.childNodes.length - 1;
              for (let i = 0; i < numChilds; i++) {
                  // we now have one of the minimonth controls while 'start'
                  // and 'end' are set to the interval this minimonth shows.
                  let minimonth = row.childNodes[i];
                  minimonth.showMonth(cal.dateTimeToJsDate(start));
                  if (aRecurrenceInfo) {
                      // retrieve an array of dates that represents all occurrences
                      // that fall into this time interval [start,end[.
                      // note: the following loop assumes that this array conains
                      // dates that are strictly monotonically increasing.
                      // should getOccurrenceDates() not enforce this assumption we
                      // need to fall back to some different algorithm.
                      let dates = aRecurrenceInfo.getOccurrenceDates(start, end, 0, {});

                      // now run throgh all days of this month and set the
                      // 'busy' attribute with respect to the occurrence array.
                      let index = 0;
                      let occurrence = null;
                      if (index < dates.length) {
                          occurrence =
                              dates[index++]
                                  .getInTimezone(start.timezone);
                      }
                      let current = start.clone();
                      while (current.compare(end) < 0) {
                          let box = minimonth.getBoxForDate(current);
                          if (box) {
                              if (occurrence &&
                                  occurrence.day == current.day &&
                                  occurrence.month == current.month &&
                                  occurrence.year == current.year) {
                                  box.setAttribute("busy", 1);
                                  if (index < dates.length) {
                                      occurrence =
                                          dates[index++]
                                              .getInTimezone(start.timezone);
                                      // take into account that the very next occurrence
                                      // can happen at the same day as the previous one.
                                      if (occurrence.day == current.day &&
                                          occurrence.month == current.month &&
                                          occurrence.year == current.year) {
                                          continue;
                                      }
                                  } else {
                                      occurrence = null;
                                  }
                              } else {
                                  box.removeAttribute("busy");
                              }
                          }
                          current.day++;
                      }
                  }
                  start.month++;
                  end.month++;
              }
              row = row.nextSibling;
          }
        ]]></body>
      </method>
    </implementation>
  </binding>
</bindings>
