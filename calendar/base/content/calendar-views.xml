<?xml version="1.0"?>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<bindings id="calendar-specific-view-bindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="calendar-day-view"
           extends="chrome://calendar/content/calendar-multiday-view.xml#calendar-multiday-view">
    <implementation implements="calICalendarView">
      <property name="observerID">
        <getter><![CDATA[
          return "day-view-observer";
        ]]></getter>
      </property>
      <property name="supportsWorkdaysOnly"
                readonly="true"
                onget="return false;"/>

      <!-- Public methods -->
      <method name="goToDay">
        <parameter name="aDate"/>
        <body><![CDATA[
          if (!aDate) {
              this.refresh();
              return;
          }
          aDate = aDate.getInTimezone(this.timezone);
          this.setDateRange(aDate, aDate);
          this.selectedDay = aDate;
        ]]></body>
      </method>
      <method name="moveView">
        <parameter name="aNumber"/>
        <body><![CDATA[
          if (aNumber) {
              let currentDay = this.startDay.clone();
              currentDay.day += aNumber;
              this.goToDay(currentDay);
          } else {
              this.goToDay(now());
          }
        ]]></body>
      </method>
    </implementation>
  </binding>

  <binding id="calendar-week-view"
           extends="chrome://calendar/content/calendar-multiday-view.xml#calendar-multiday-view">
    <implementation implements="calICalendarView">
      <constructor><![CDATA[
        // add a listener for the mode change
        this.mModeHandler = (event) => {
            if (event.attrName == "mode") {
                this.onModeChanged(event);
            }
        };
        document.getElementById("modeBroadcaster").addEventListener("DOMAttrModified", this.mModeHandler, true);
      ]]></constructor>
      <destructor><![CDATA[
        document.getElementById("modeBroadcaster").removeEventListener("DOMAttrModified", this.mModeHandler, true);
      ]]></destructor>

      <property name="observerID">
        <getter><![CDATA[
          return "week-view-observer";
        ]]></getter>
      </property>

      <method name="onModeChanged">
        <parameter name="aEvent"/>
        <body><![CDATA[
          let currentMode = document.getElementById("modeBroadcaster").getAttribute("mode");
          if (currentMode != "calendar") {
              timeIndicator.cancel();
          }
        ]]></body>
      </method>

      <!--Public methods-->
      <method name="goToDay">
        <parameter name="aDate"/>
        <body><![CDATA[
          this.displayDaysOff = !this.mWorkdaysOnly;

          if (!aDate) {
              this.refresh();
              return;
          }
          aDate = aDate.getInTimezone(this.timezone);
          let weekStart = cal.getWeekInfoService().getStartOfWeek(aDate);
          let weekEnd = weekStart.clone();
          weekEnd.day += 6;
          this.setDateRange(weekStart, weekEnd);
          this.selectedDay = aDate;
        ]]></body>
      </method>
      <method name="moveView">
        <parameter name="aNumber"/>
        <body><![CDATA[
          if (aNumber) {
              let date = this.selectedDay.clone();
              date.day += 7 * aNumber;
              this.goToDay(date);
          } else {
              this.goToDay(now());
          }
        ]]></body>
      </method>
    </implementation>
  </binding>

  <binding id="calendar-multiweek-view" extends="chrome://calendar/content/calendar-month-view.xml#calendar-month-base-view">
    <implementation implements="calICalendarView">
      <constructor><![CDATA[
        Components.utils.import("resource://gre/modules/Preferences.jsm");
        this.mWeeksInView = Preferences.get("calendar.weeks.inview", 4);
      ]]></constructor>

      <field name="mWeeksInView">4</field>

      <property name="weeksInView">
        <getter><![CDATA[
          return this.mWeeksInView;
        ]]></getter>
        <setter><![CDATA[
          this.mWeeksInView = val;
          Preferences.set("calendar.weeks.inview", Number(val));
          this.refreshView();
          return val;
        ]]></setter>
      </property>

      <property name="supportsZoom" readonly="true"
                onget="return true;"/>

      <method name="zoomIn">
        <parameter name="aLevel"/>
        <body><![CDATA[
          let visibleWeeks = Preferences.get("calendar.weeks.inview", 4);
          visibleWeeks += (aLevel || 1);

          Preferences.set("calendar.weeks.inview", Math.min(visibleWeeks, 6));
        ]]></body>
      </method>

      <method name="zoomOut">
        <parameter name="aLevel"/>
        <body><![CDATA[
          let visibleWeeks = Preferences.get("calendar.weeks.inview", 4);
          visibleWeeks -= aLevel || 1;

          Preferences.set("calendar.weeks.inview", Math.max(visibleWeeks, 2));
        ]]></body>
      </method>

      <method name="zoomReset">
        <body><![CDATA[
          Preferences.set("calendar.view.visiblehours", 4);
        ]]></body>
      </method>

      <property name="observerID">
        <getter><![CDATA[
          return "multiweek-view-observer";
        ]]></getter>
      </property>

      <!--Public methods-->
      <method name="goToDay">
        <parameter name="aDate"/>
        <body><![CDATA[
          this.showFullMonth = false;
          this.displayDaysOff = !this.mWorkdaysOnly;

          // If aDate is null it means that only a refresh is needed
          // without changing the start and end of the view.
          if (aDate) {
              aDate = aDate.getInTimezone(this.timezone);
              // Get the first date that should be shown. This is the
              // start of the week of the day that we're centering around
              // adjusted for the day the week starts on and the number
              // of previous weeks we're supposed to display.
              let dayStart = cal.getWeekInfoService().getStartOfWeek(aDate);
              dayStart.day -= 7 * Preferences.get("calendar.previousweeks.inview", 0);
              // The last day we're supposed to show
              let dayEnd = dayStart.clone();
              dayEnd.day += (7 * this.mWeeksInView) - 1;
              this.setDateRange(dayStart, dayEnd);
              this.selectedDay = aDate;
          } else {
              this.refresh();
          }
        ]]></body>
      </method>

      <method name="moveView">
        <parameter name="aNumber"/>
        <body><![CDATA[
          if (aNumber) {
              let date = this.startDay.clone();
              let savedSelectedDay = this.selectedDay.clone();
              // aNumber only corresponds to the number of weeks to move
              // make sure to compensate for previous weeks in view too
              date.day += 7 * (aNumber + Preferences.get("calendar.previousweeks.inview", 4));
              this.goToDay(date);
              savedSelectedDay.day += 7 * aNumber;
              this.selectedDay = savedSelectedDay;
          } else {
              let date = now();
              this.goToDay(date);
              this.selectedDay = date;
          }
        ]]></body>
      </method>
    </implementation>
  </binding>

  <binding id="calendar-month-view" extends="chrome://calendar/content/calendar-month-view.xml#calendar-month-base-view">
    <implementation implements="calICalendarView">
      <property name="observerID">
        <getter><![CDATA[
          return "month-view-observer";
        ]]></getter>
      </property>

      <!--Public methods-->
      <method name="goToDay">
        <parameter name="aDate"/>
        <body><![CDATA[
          this.displayDaysOff = !this.mWorkdaysOnly;

          if (aDate) {
              aDate = aDate.getInTimezone(this.timezone);
          }
          this.showDate(aDate);
        ]]></body>
      </method>
      <method name="getRangeDescription">
        <body><![CDATA[
          let monthName = cal.formatMonth(this.rangeStartDate.month + 1,
                                          "calendar", "monthInYear");
          return calGetString("calendar", "monthInYear", [monthName, this.rangeStartDate.year]);
         ]]></body>
       </method>
      <method name="moveView">
        <parameter name="aNumber"/>
        <body><![CDATA[
          let dates = this.getDateList({});
          this.displayDaysOff = !this.mWorkdaysOnly;

          if (aNumber) {
              // The first few dates in this list are likely in the month
              // prior to the one actually being shown (since the month
              // probably doesn't start on a Sunday).  The 7th item must
              // be in correct month though.
              let date = dates[6].clone();

              date.month += aNumber;
              // Need to store this before we move
              let oldSelectedDay = this.selectedDay;

              this.goToDay(date);

              // Most of the time we want to select the date with the
              // same day number in the next month
              let newSelectedDay = oldSelectedDay.clone();
              newSelectedDay.month += aNumber;
              // correct for accidental rollover into the next month
              if ((newSelectedDay.month - aNumber + 12) % 12 != oldSelectedDay.month) {
                  newSelectedDay.month -= 1;
                  newSelectedDay.day = newSelectedDay.endOfMonth.day;
              }

              this.selectedDay = newSelectedDay;
          } else {
              let date = now();
              this.goToDay(date);
              this.selectedDay = date;
          }
        ]]></body>
      </method>
    </implementation>
  </binding>
</bindings>
